from leaguematches.models import Season
from leaguematches.models import MatchOrder
from leaguematches.models import Player
from leaguematches.models import MatchReport
from django.db.models import Q
from django.db.models import Max, Min
from operator import itemgetter

# Populate order table for a season
season_id = 1
minround = MatchReport.objects.filter(season_id=1).aggregate(Min('round'))['round__min']
maxround = MatchReport.objects.filter(season_id=1).aggregate(Max('round'))['round__max']
for player in Player.objects.all():
  print player
  matches = MatchReport.objects.filter(season_id=season_id).filter(Q(reporter=player.id)|Q(opponent=player.id))
  for round in xrange(minround, maxround+1):
    order = MatchOrder.objects.filter(player=player,match__round=round).count() + 1
    print round, order
    for match in matches.filter(round=round):
      # if match for this player not already in order table, add it
      if MatchOrder.objects.filter(player=player,match=match).count() == 0:
        print 'Order ' + str(order) + ': ' + str(match)
        mo = MatchOrder(player=player, match=match, order=order)
        order += 1
        #mo.save()
  print ''

# [round1, [{'player':player 'main_wins': %d, 'main_losses': %d, 'tb_wins': %d, 'tb_losses': %d, 'main_pts': %d, 'tb_pts': %d}, ...],
#  round2, [...]]
season_matches = MatchOrder.objects.filter(match__season_id=1)
players = season_matches.distinct('player').values_list('player', flat=True)
results = []
for round in season_matches.order_by('match__round').values_list('match__round',flat=True).distinct():
    p_res = []
    for player_id in players:
        # Get first 5 matches of the player for mains
        round_matches = season_matches.filter(player__id=player_id, match__round=round).order_by('order')
        mains = round_matches[0:5]
        # The rest are tiebreaker matches
        tbs = round_matches[5:]
        # 3 points for win and 1 point for a loss
        main_wins = 0
        main_losses = 0
        main_pts = 0
        for match in mains:
            if match.match.victor().id == player_id:
                main_wins += 1
                main_pts += 3
            else:
                main_losses += 1
                main_pts += 1
        # 3 points for a win and -1 for a loss (can't go below 0)
        tb_wins = 0
        tb_losses = 0
        tb_pts = 0
        for match in tbs:
            if match.match.victor().id == player_id:
                tb_wins += 1
                tb_pts += 3
            else:
                tb_losses += 1
                if (tb_pts > 0):
                    tb_pts -= 1
        player = Player.objects.get(pk=player_id)
        p_res += {'player_ln': player.last_name,
                  'player_fn': player.first_name,
                  'main_wins': main_wins, 'main_losses': main_losses,
                  'tb_wins': tb_wins, 'tb_losses': tb_losses,
                  'main_pts': main_pts, 'tb_pts': tb_pts},
    p_res = sorted(p_res, key=itemgetter('player_ln', 'player_fn'))
    p_res = sorted(p_res, key=itemgetter('main_pts', 'tb_pts'), reverse=True)
    results += [round, p_res],

for round, round_res in results:
    print round
    for p_res in round_res:
        print '%s %s (mains %d-%d tbs %d-%d): mp=%d tbp=%d)' % \
               (p_res['player_fn'], p_res['player_ln'],
                p_res['main_wins'], p_res['main_losses'],
                p_res['tb_wins'], p_res['tb_losses'],
                p_res['main_pts'], p_res['tb_pts'])
