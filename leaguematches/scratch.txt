from leaguematches.models import Season
from leaguematches.models import MatchOrder
from leaguematches.models import Player
from leaguematches.models import MatchReport
from django.db.models import Q
from django.db.models import Max, Min
from operator import itemgetter
from django.contrib.auth.models import User
from datetime import *
from django.core.mail import send_mail

# Find latest matche
 MatchReport.objects.order_by('-played_date', 'report_date')[0]
 
# Find "lazy" users
MatchReport.objects.filter(season__name="Scars of Mirrodin", verified=False).order_by('opponent').distinct('opponent').values_list('opponent__user__email', flat=True)
MatchReport.objects.filter(season__name="Scars of Mirrodin", verified=False).order_by('opponent__user__email').distinct('opponent__user__email').values_list('opponent__user__email', flat=True)

for uid in MatchReport.objects.filter(verified=False).order_by('opponent__user__email').distinct('opponent__user__email').values_list('opponent__user', flat=True):
    user = User.objects.get(pk=uid)
    print 'Emailing %s...' % (user.email)
    subj = 'You need to verify your McDiller magic league matches, %s' %(user.first_name)
    body = 'You have unverified matches.\n\nGo to http://magic.mcdillers.com/player/%d/ to verify!\n\nThanks,\nJake' % (user.player.id)
    reply_to = 'jake.e.miller@gmail.com'
    send_to = user.email
    # uncomment this line to test email to self
    # send_to = 'jake.e.miller@gmail.com'
    print 'Reply To: ' + reply_to 
    print 'Send To: ' + send_to 
    print 'Subject: ' + subj
    print 'Body:'
    print body
    print
    send_mail(subj, body, reply_to, [send_to])
    break


# Populate order table for a season
season_id = 1
minround = MatchReport.objects.filter(season_id=1).aggregate(Min('round'))['round__min']
maxround = MatchReport.objects.filter(season_id=1).aggregate(Max('round'))['round__max']
for player in Player.objects.all():
  print player
  matches = MatchReport.objects.filter(season_id=season_id).filter(Q(reporter=player.id)|Q(opponent=player.id))
  for round in xrange(minround, maxround+1):
    order = MatchOrder.objects.filter(player=player,match__round=round).count() + 1
    print round, order
    for match in matches.filter(round=round):
      # if match for this player not already in order table, add it
      if MatchOrder.objects.filter(player=player,match=match).count() == 0:
        print 'Order ' + str(order) + ': ' + str(match)
        mo = MatchOrder(player=player, match=match, order=order)
        order += 1
        #mo.save()
  print ''


def addIfNotExist(name, season=None):
    first_name, last_name = name.split()
    player_lst=Player.objects.filter(user__first_name=first_name, user__last_name=last_name)
    if player_lst.count() != 0:
        return player_lst[0]
    user_lst=User.objects.filter(first_name=first_name, last_name=last_name)
    if user_lst.count() != 0:
        return
    username=first_name.lower() + last_name.lower()
    email=username + '@gottachangeme.no_reply'
    print 'add user ' + username + ' ' + email + ' ' + first_name + ' ' + last_name
    new_user = User.objects.create_user(username, email, '1234')
    new_user.first_name = first_name
    new_user.last_name = last_name
    new_user.save()
    if season is not None:
        season = Season.objects.get(name="Khans of Tarkir")
    player = Player(user=new_user)
    player.save()
    if season is not None:
        print season
        player.seasons.add(season)
    player.save()
    return player

# Reset from scratch
# Import matches
season_name='Khans of Tarkir'
season = None
try:
    season = Season.objects.get(name=season_name)
except:
    season = Season(name='Khans of Tarkir')
    season.save()

fd = open("../import.txt")
lines = fd.readlines()
for line in lines:
    name_translation = {'Adam': 'Adam Chunn',
                        'Josh': 'Josh Sabio',
                        'Alex': 'Alex Fuxa',
                        'Brian': 'Brian Shoemaker',
                        'JakeK': 'Jake Kastelic',
                        'Jacob': 'Jacob Smalts',
                        'JakeM': 'Jake Miller',
                        'Philip': 'Philip Kelleher',
                        'John': 'John Harris',
                        'Ken': 'Ken Scianna',
                        'Kevin': 'Kevin Nygaard',
                        'Joe': 'Joe Wanja',}
    # Parse info
    lst = line.strip().split()
    reporter = name_translation[lst[0]]
    round = int(lst[3])
    played_date = datetime.strptime(lst[4] + "/2015", '%m/%d/%Y')
    winner = name_translation[lst[5]]
    loser = name_translation[lst[7]]
    # Check that winner and loser exist as players and if not add them
    player_reporter=addIfNotExist(reporter, 'Khans of Tarkir')
    player_winner=addIfNotExist(winner, 'Khans of Tarkir')
    player_loser=addIfNotExist(loser, 'Khans of Tarkir')
    player_opponent = player_winner if player_loser == player_reporter else player_loser
    win = player_winner == player_reporter
    if player_reporter not in [player_winner, player_loser]:
        raise Exception('NOOOOO')
    # Check for dup match and if so, mark verified; if already print warn
    match = None
    try:
        match = MatchReport.objects.get(winner=player_winner,loser=player_loser,played_date=played_date, round=round, season=season)
    except:
        match = MatchReport(reporter=player_reporter,
                            opponent=player_opponent,
                            winner=player_winner,
                            loser=player_loser,
                            round=round,
                            season=season,
                            report_date=datetime.now(),
                            played_date=played_date,
                            win=win,
                            verified=False)
        match.save()
    else:
        if match.verified:
            print 'DOUBLE REPORTING!!!!!: ' + str(match)
        else:
            match.verified=True
            match.save()
